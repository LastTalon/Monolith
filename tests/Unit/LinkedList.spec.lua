--- Tests for the @{LinkedList} class.

return function()
	local module = game:GetService("ReplicatedStorage").Monolith
	local LinkedList = require(module.LinkedList)

	describe("Constructor", function()
		it("should create an empty LinkedList", function()
			local list = LinkedList.new()
			expect(list:Empty()).to.equal(true)
		end)

		it("should create a LinkedList from a table", function()
			local items = { 1, 2, 3, 4, 5 }
			local list = LinkedList.new(items)
			expect(list:Count()).to.equal(#items)
			for i, v in ipairs(items) do
				expect(list:Get(i)).to.equal(v)
			end
		end)

		it("should create a LinkedList from a Collection", function()
			local items = LinkedList.new({ 1, 2, 3, 4, 5 })
			local list = LinkedList.new(items)
			expect(list:Count()).to.equal(items:Count())
			for i, v in items:Enumerator() do
				expect(list:Get(i)).to.equal(v)
			end
		end)

		it("should error when attempting to create a LinkedList from a non-table", function()
			expect(function()
				LinkedList.new(true)
			end).to.throw("Cannot construct LinkedList from type boolean.")
			expect(function()
				LinkedList.new(1)
			end).to.throw("Cannot construct LinkedList from type number.")
			expect(function()
				LinkedList.new("string")
			end).to.throw("Cannot construct LinkedList from type string.")
			expect(function()
				LinkedList.new(function()
				end)
			end).to.throw("Cannot construct LinkedList from type function.")
			expect(function()
				LinkedList.new(Instance.new("Folder"))
			end).to.throw("Cannot construct LinkedList from type userdata.")
			expect(function()
				LinkedList.new(coroutine.create(function()
				end))
			end).to.throw("Cannot construct LinkedList from type thread.")
		end)
	end)

	describe("Enumerable Interface", function()
		describe("Enumerator", function()
			it("should provide an iterator generator", function()
				local list = LinkedList.new()
				local generator = list:Enumerator()
				expect(generator).to.be.a("function")
			end)

			it("should enumerate in a generic for loop", function()
				local list = LinkedList.new()
				local total = 10
				for i = 1, total do
					list:Add(i)
				end

				local count = 0
				for i, v in list:Enumerator() do
					count = count + 1
					expect(i).to.be.a("number")
					expect(v).to.be.a("number")
				end

				expect(count).to.equal(total)
			end)
		end)
	end)

	describe("Collection Interface", function()
		describe("Required Methods", function()
			describe("Contains", function()
				it("should not find any element when empty", function()
					local list = LinkedList.new()
					expect(list:Contains(0)).to.equal(false)
				end)

				it("should find an element when that element exists", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Contains(1)).to.equal(true)
				end)

				it("should not find an element when that element does not exist", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Contains(0)).to.equal(false)
				end)

				it("should not find an element until it is added", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Contains(0)).to.equal(false)
					list:Add(0)
					expect(list:Contains(0)).to.equal(true)
				end)

				it("should no longer find an element when its removed", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Contains(1)).to.equal(true)
					list:Remove(1)
					expect(list:Contains(1)).to.equal(false)
				end)
			end)

			describe("ContainsAll", function()
				it("should not find any element when empty", function()
					local list = LinkedList.new()
					local contained = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:ContainsAll(contained)).to.equal(false)
				end)

				it("should find all zero elements when the provided Collection is empty", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local contained = LinkedList.new()
					expect(list:ContainsAll(contained)).to.equal(true)
				end)

				it("should find all elements when all of the elements exist", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local contained = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:ContainsAll(contained)).to.equal(true)
				end)

				it("should find one element when it exists", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local contained = LinkedList.new({ 3 })
					expect(list:ContainsAll(contained)).to.equal(true)
				end)

				it("should not find all elements when one does not exist", function()
					local list = LinkedList.new({ 1, 2, 4, 5 })
					local contained = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:ContainsAll(contained)).to.equal(false)
				end)

				it("should not find one element when it does not exist", function()
					local list = LinkedList.new({ 1, 2, 4, 5 })
					local contained = LinkedList.new({ 3 })
					expect(list:ContainsAll(contained)).to.equal(false)
				end)

				it("should not find all elements until they are added", function()
					local list = LinkedList.new()
					local contained = LinkedList.new({ 1, 2 })
					expect(list:ContainsAll(contained)).to.equal(false)
					list:Add(1)
					expect(list:ContainsAll(contained)).to.equal(false)
					list:Add(2)
					expect(list:ContainsAll(contained)).to.equal(true)
				end)

				it("should no longer find all elements when they are removed", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local contained = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:ContainsAll(contained)).to.equal(true)
					list:Remove(1)
					expect(list:ContainsAll(contained)).to.equal(false)
				end)
			end)

			describe("ContainsAny", function()
				it("should not find any element when empty", function()
					local list = LinkedList.new()
					local contained = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:ContainsAny(contained)).to.equal(false)
				end)

				it("should not find any element when the provided Collection is empty", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local contained = LinkedList.new()
					expect(list:ContainsAny(contained)).to.equal(false)
				end)

				it("should find all elements when the elements exist", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local contained = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:ContainsAny(contained)).to.equal(true)
				end)

				it("should find one element when it exists", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local contained = LinkedList.new({ 3 })
					expect(list:ContainsAny(contained)).to.equal(true)
				end)

				it("should find some elements when only one does not exist", function()
					local list = LinkedList.new({ 1, 2, 4, 5 })
					local contained = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:ContainsAny(contained)).to.equal(true)
				end)

				it("should not find one element when it does not exist", function()
					local list = LinkedList.new({ 1, 2, 4, 5 })
					local contained = LinkedList.new({ 3 })
					expect(list:ContainsAny(contained)).to.equal(false)
				end)

				it("should not find elements until they are added", function()
					local list = LinkedList.new()
					local contained = LinkedList.new({ 1, 2 })
					expect(list:ContainsAny(contained)).to.equal(false)
					list:Add(1)
					expect(list:ContainsAny(contained)).to.equal(true)
				end)

				it("should no longer find all elements when they are all removed", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local contained = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:ContainsAny(contained)).to.equal(true)
					list:Remove(1)
					expect(list:ContainsAny(contained)).to.equal(true)
					list:Clear()
					expect(list:ContainsAny(contained)).to.equal(false)
				end)
			end)

			describe("Count", function()
				it("should count zero when empty", function()
					local list = LinkedList.new()
					expect(list:Count()).to.equal(0)
				end)

				it("should count the number of elements in the LinkedList", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Count()).to.equal(5)
				end)

				it("should count new elements when they are added", function()
					local list = LinkedList.new()
					local total = 10
					expect(list:Count()).to.equal(0)
					for i = 1, total do
						list:Add(i)
						expect(list:Count()).to.equal(i)
					end
					expect(list:Count()).to.equal(total)
				end)

				it("should not count elements after they are removed", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local count = list:Count()
					expect(count).to.equal(5)
					while count > 0 do
						list:Pop()
						local oldCount = count
						count = list:Count()
						expect(count).to.equal(oldCount - 1)
					end
				end)

				it("should count zero after being cleared", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Count()).to.equal(5)
					list:Clear()
					expect(list:Count()).to.equal(0)
				end)
			end)

			describe("Empty", function()
				it("should be empty when instantiated", function()
					local list = LinkedList.new()
					expect(list:Empty()).to.equal(true)
				end)

				it("should not be empty with one element", function()
					local list = LinkedList.new({ 1 })
					expect(list:Empty()).to.equal(false)
				end)

				it("should not be empty with multiple elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Empty()).to.equal(false)
				end)

				it("should no longer be empty after an element is added", function()
					local list = LinkedList.new()
					expect(list:Empty()).to.equal(true)
					list:Add(1)
					expect(list:Empty()).to.equal(false)
				end)

				it("should be empty after all elements are removed", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local count = list:Count()
					while count > 0 do
						expect(list:Empty()).to.equal(false)
						list:Pop()
						count = list:Count()
					end
					expect(list:Empty()).to.equal(true)
				end)

				it("should be empty after being cleared", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Empty()).to.equal(false)
					list:Clear()
					expect(list:Empty()).to.equal(true)
				end)
			end)

			describe("ToArray", function()
				it("should return a table", function()
					local list = LinkedList.new()
					expect(list:ToArray()).to.be.a("table")
				end)

				it("should create a table of the same size", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(#list:ToArray()).to.equal(list:Count())
				end)

				it("should create an empty table when empty", function()
					local list = LinkedList.new()
					expect(#list:ToArray()).to.equal(0)
				end)

				it("should create a table with the same elements and order of enumeration", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local array = list:ToArray()
					expect(#array).to.equal(list:Count())
					for i, v in ipairs(array) do
						expect(v).to.equal(list:Get(i))
					end
				end)

				it("should provide only array indexable elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local array = list:ToArray()
					local count = 0
					for _ in pairs(array) do
						count = count + 1
					end
					expect(count).to.equal(#array)
				end)
			end)

			describe("ToTable", function()
				it("should provide the same representation as ToArray", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local array = list:ToArray()
					local table = list:ToTable()
					expect(table).to.be.a("table")
					expect(#table).to.equal(#array)
					for i, v in pairs(table) do
						expect(v).to.equal(array[i])
					end
				end)
			end)
		end)

		describe("Optional Methods", function()
			describe("Add", function()
				it("should add elements when empty", function()
					local list = LinkedList.new()
					list:Add(1)
					expect(list:Count()).to.equal(1)
				end)

				it("should add elements when not empty", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Add(6)
					expect(list:Count()).to.equal(6)
				end)

				it("should add elements to the end", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Add(1)
					expect(list:Last()).to.equal(1)
				end)

				it("should return true", function()
					local list = LinkedList.new()
					expect(list:Add(1)).to.equal(true)
				end)

				it("should add duplicate elements", function()
					local list = LinkedList.new({ 1, 1, 1, 1, 1 })
					list:Add(1)
					expect(list:Count()).to.equal(6)
				end)
			end)

			describe("AddAll", function()
				it("should add multiple elements when empty", function()
					local list = LinkedList.new()
					local add = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:AddAll(add)
					expect(list:Count()).to.equal(5)
				end)

				it("should add one element when empty", function()
					local list = LinkedList.new()
					local add = LinkedList.new({ 1 })
					list:AddAll(add)
					expect(list:Count()).to.equal(1)
				end)

				it("should add multiple elements when not empty", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local add = LinkedList.new({ 6, 7, 8, 9, 0 })
					list:AddAll(add)
					expect(list:Count()).to.equal(10)
				end)

				it("should add one element when not empty", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local add = LinkedList.new({ 6 })
					list:AddAll(add)
					expect(list:Count()).to.equal(6)
				end)

				it("should add multiple elements to the end", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local add = LinkedList.new({ 6, 7, 8, 9, 10 })
					list:AddAll(add)
					expect(list:Get(6)).to.equal(6)
					expect(list:Get(7)).to.equal(7)
					expect(list:Get(8)).to.equal(8)
					expect(list:Get(9)).to.equal(9)
					expect(list:Get(10)).to.equal(10)
				end)

				it("should add one element to the end", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local add = LinkedList.new({ 6 })
					list:AddAll(add)
					expect(list:Get(6)).to.equal(6)
				end)

				it("should return true when adding multiple elements", function()
					local list = LinkedList.new()
					local add = LinkedList.new({ 6, 7, 8, 9, 10 })
					expect(list:AddAll(add)).to.equal(true)
				end)

				it("should return true when adding one element", function()
					local list = LinkedList.new()
					local add = LinkedList.new({ 6 })
					expect(list:AddAll(add)).to.equal(true)
				end)

				it("should add multiple duplicate elements", function()
					local list = LinkedList.new({ 1, 1, 1, 1, 1 })
					local add = LinkedList.new({ 1, 1, 1, 1, 1 })
					list:AddAll(add)
					expect(list:Count()).to.equal(10)
				end)

				it("should add one duplicate element", function()
					local list = LinkedList.new({ 1, 1, 1, 1, 1 })
					local add = LinkedList.new({ 1 })
					list:AddAll(add)
					expect(list:Count()).to.equal(6)
				end)
			end)

			describe("Clear", function()
				it("should clear all elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Empty()).to.equal(false)
					list:Clear()
					expect(list:Empty()).to.equal(true)
				end)

				it("should clear when already empty", function()
					local list = LinkedList.new()
					list:Clear()
					expect(list:Empty()).to.equal(true)
				end)

				it("should clear with one element", function()
					local list = LinkedList.new({ 1 })
					list:Clear()
					expect(list:Empty()).to.equal(true)
				end)

				it("should clear with multiple elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Clear()
					expect(list:Empty()).to.equal(true)
				end)

				it("should clear with duplicate elements", function()
					local list = LinkedList.new({ 1, 1, 1, 1, 1 })
					list:Clear()
					expect(list:Empty()).to.equal(true)
				end)
			end)

			describe("Remove", function()
				it("should successfully attempt to remove when empty", function()
					local list = LinkedList.new()
					expect(function()
						list:Remove(1)
					end).never.to.throw()
				end)

				it("should return false when attempting to remove when empty", function()
					local list = LinkedList.new()
					expect(list:Remove(1)).to.equal(false)
				end)

				it("should remove one element", function()
					local list = LinkedList.new({ 1 })
					list:Remove(1)
					expect(list:Count()).to.equal(0)
				end)

				it("should return true when removing one element", function()
					local list = LinkedList.new({ 1 })
					expect(list:Remove(1)).to.equal(true)
				end)

				it("should remove an element from many", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Remove(3)
					expect(list:Count()).to.equal(4)
				end)

				it("should return true when removing an element from many", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Remove(3)).to.equal(true)
				end)

				it("should not remove when the element does not exist", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Remove(6)
					expect(list:Count()).to.equal(5)
				end)

				it("should return false when an element isn't removed", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Remove(6)).to.equal(false)
				end)

				it("should remove one element when there are duplicates", function()
					local list = LinkedList.new({ 1, 1, 1, 1, 1 })
					list:Remove(1)
					expect(list:Count()).to.equal(4)
				end)

				it("should return true when removing a duplicate", function()
					local list = LinkedList.new({ 1, 1, 1, 1, 1 })
					expect(list:Remove(1)).to.equal(true)
				end)
			end)

			describe("RemoveAll", function()
				it("should successfully attempt to remove when empty", function()
					local list = LinkedList.new()
					local remove = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(function()
						list:RemoveAll(remove)
					end).never.to.throw()
				end)

				it("should return false when attempting to remove when empty", function()
					local list = LinkedList.new()
					local remove = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:RemoveAll(remove)).to.equal(false)
				end)

				it("should remove one element", function()
					local list = LinkedList.new({ 1 })
					local remove = LinkedList.new({ 1 })
					list:RemoveAll(remove)
					expect(list:Count()).to.equal(0)
				end)

				it("should return true when removing one element", function()
					local list = LinkedList.new({ 1 })
					local remove = LinkedList.new({ 1 })
					expect(list:RemoveAll(remove)).to.equal(true)
				end)

				it("should remove with excess elements", function()
					local list = LinkedList.new({ 1 })
					local remove = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:RemoveAll(remove)
					expect(list:Count()).to.equal(0)
				end)

				it("should return true when removing with excess elements", function()
					local list = LinkedList.new({ 1 })
					local remove = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:RemoveAll(remove)).to.equal(true)
				end)

				it("should remove one element from many", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local remove = LinkedList.new({ 1 })
					list:RemoveAll(remove)
					expect(list:Count()).to.equal(4)
				end)

				it("should return true when removing one element from many", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local remove = LinkedList.new({ 1 })
					expect(list:RemoveAll(remove)).to.equal(true)
				end)

				it("should not remove when the element does not exist", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local remove = LinkedList.new({ 0 })
					list:RemoveAll(remove)
					expect(list:Count()).to.equal(5)
				end)

				it("should return false when an element isn't removed", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local remove = LinkedList.new({ 0 })
					expect(list:RemoveAll(remove)).to.equal(false)
				end)

				it("should remove multiple elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local remove = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:RemoveAll(remove)
					expect(list:Count()).to.equal(0)
				end)

				it("should return true when removing multiple elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local remove = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:RemoveAll(remove)).to.equal(true)
				end)

				it("should remove only once for each occurrence of duplicate elements", function()
					local list = LinkedList.new({ 1, 1, 1, 1, 1 })
					local remove = LinkedList.new({ 1, 1, 1 })
					list:RemoveAll(remove)
					expect(list:Count()).to.equal(2)
				end)

				it("should return true when removing duplicates", function()
					local list = LinkedList.new({ 1, 1, 1, 1, 1 })
					local remove = LinkedList.new({ 1, 1, 1 })
					expect(list:RemoveAll(remove)).to.equal(true)
				end)
			end)

			describe("RetainAll", function()
				it("should successfully attempt to retain when empty", function()
					local list = LinkedList.new()
					local retain = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(function()
						list:RetainAll(retain)
					end).never.to.throw()
				end)

				it("should return false when retaining when empty", function()
					local list = LinkedList.new()
					local retain = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:RetainAll(retain)).to.equal(false)
				end)

				it("should retain one element", function()
					local list = LinkedList.new({ 1 })
					local retain = LinkedList.new({ 1 })
					list:RetainAll(retain)
					expect(list:Count()).to.equal(1)
				end)

				it("should return false when retaining one element", function()
					local list = LinkedList.new({ 1 })
					local retain = LinkedList.new({ 1 })
					expect(list:RetainAll(retain)).to.equal(false)
				end)

				it("should retain with excess elements to retain", function()
					local list = LinkedList.new({ 1 })
					local retain = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:RetainAll(retain)
					expect(list:Count()).to.equal(1)
				end)

				it("should return false when retaining with excess elements to retain", function()
					local list = LinkedList.new({ 1 })
					local retain = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:RetainAll(retain)).to.equal(false)
				end)

				it("should not retain one element which does not match", function()
					local list = LinkedList.new({ 1 })
					local retain = LinkedList.new({ 0 })
					list:RetainAll(retain)
					expect(list:Count()).to.equal(0)
				end)

				it("should return true when not retaining one element that does not match", function()
					local list = LinkedList.new({ 1 })
					local retain = LinkedList.new({ 0 })
					expect(list:RetainAll(retain)).to.equal(true)
				end)

				it("should retain one element from many", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local retain = LinkedList.new({ 3 })
					list:RetainAll(retain)
					expect(list:Count()).to.equal(1)
				end)

				it("should return true when retaining one element from many", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local retain = LinkedList.new({ 3 })
					expect(list:RetainAll(retain)).to.equal(true)
				end)

				it("should retain no elements when one element does not match", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local retain = LinkedList.new({ 6 })
					list:RetainAll(retain)
					expect(list:Count()).to.equal(0)
				end)

				it("should return true when not retaining one element", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local retain = LinkedList.new({ 6 })
					expect(list:RetainAll(retain)).to.equal(true)
				end)

				it("should retain multiple elements when more exist", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local retain = LinkedList.new({ 1, 3, 5 })
					list:RetainAll(retain)
					expect(list:Count()).to.equal(3)
				end)

				it("should return true when retaining multiple elements when more exist", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local retain = LinkedList.new({ 1, 3, 5 })
					expect(list:RetainAll(retain)).to.equal(true)
				end)

				it("should retain multiple elements when attempting to retain excess elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local retain = LinkedList.new({ 0, 1, 3 })
					list:RetainAll(retain)
					expect(list:Count()).to.equal(2)
				end)

				it("should return true when attemping to retain with excess elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local retain = LinkedList.new({ 0, 1, 3 })
					expect(list:RetainAll(retain)).to.equal(true)
				end)

				it("should retain all elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local retain = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:RetainAll(retain)
					expect(list:Count()).to.equal(5)
				end)

				it("should return false when retaining all elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local retain = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:RetainAll(retain)).to.equal(false)
				end)

				it("should retain all elements when attempting to retain excess", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local retain = LinkedList.new({ 0, 1, 2, 3, 4, 5 })
					list:RetainAll(retain)
					expect(list:Count()).to.equal(5)
				end)

				it("should return false when attempting to retain exceess and retaining all elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local retain = LinkedList.new({ 0, 1, 2, 3, 4, 5 })
					expect(list:RetainAll(retain)).to.equal(false)
				end)

				it("should retain all duplicates", function()
					local list = LinkedList.new({ 1, 1, 2, 2, 3 })
					local retain = LinkedList.new({ 1, 2 })
					list:RetainAll(retain)
					expect(list:Count()).to.equal(4)
				end)

				it("should return true when retaining duplicates and more exist", function()
					local list = LinkedList.new({ 1, 1, 2, 2, 3 })
					local retain = LinkedList.new({ 1, 2 })
					expect(list:RetainAll(retain)).to.equal(true)
				end)

				it("should retain all duplicates when attemping to retain excess", function()
					local list = LinkedList.new({ 1, 1, 1, 1, 1 })
					local retain = LinkedList.new({ 1, 2 })
					list:RetainAll(retain)
					expect(list:Count()).to.equal(5)
				end)

				it("should return false when retaining all duplicates", function()
					local list = LinkedList.new({ 1, 1, 1, 1, 1 })
					local retain = LinkedList.new({ 1 })
					expect(list:RetainAll(retain)).to.equal(false)
				end)
			end)
		end)
	end)

	describe("List Interface", function()
		describe("Required Methods", function()
			describe("First", function()
				it("should error when empty", function()
					local list = LinkedList.new()
					expect(function()
						list:First()
					end).to.throw("No first element exists.")
				end)

				it("should get the first element with one element", function()
					local list = LinkedList.new({ 1 })
					expect(list:First()).to.equal(1)
				end)

				it("should get the first element with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:First()).to.equal(1)
				end)

				it("should get the first element when elements are removed", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Shift()
					expect(list:First()).to.equal(2)
				end)

				it("should error when all elements have been removed", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					while list:Count() > 0 do
						list:Shift()
					end
					expect(function()
						list:First()
					end).to.throw("No first element exists.")
				end)
			end)

			describe("Get", function()
				it("should error when attempting get an element when empty", function()
					local list = LinkedList.new()
					expect(function()
						list:Get(1)
					end).to.throw("Index '1' is out of bounds.")
				end)

				it("should get an element with one element", function()
					local list = LinkedList.new({ 1 })
					expect(list:Get(1)).to.equal(1)
				end)

				it("should error when out of bounds with one element", function()
					local list = LinkedList.new({ 1 })
					expect(function()
						list:Get(2)
					end).to.throw("Index '2' is out of bounds.")
				end)

				it("should get an element with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					for i = 1, list:Count() do
						expect(list:Get(i)).to.equal(i)
					end
				end)

				it("should error when out of bounds with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(function()
						list:Get(6)
					end).to.throw("Index '6' is out of bounds.")
				end)
			end)

			describe("IndexOf", function()
				it("should return zero when empty", function()
					local list = LinkedList.new()
					expect(list:IndexOf(1)).to.equal(0)
				end)

				it("should error when providing an index when empty", function()
					local list = LinkedList.new()
					expect(function()
						list:IndexOf(1, 1)
					end).to.throw("Index '1' is out of bounds.")
				end)

				it("should find the index with one element", function()
					local list = LinkedList.new({ 1 })
					expect(list:IndexOf(1)).to.equal(1)
				end)

				it("should return zero when the element doesn't exist with one element", function()
					local list = LinkedList.new({ 1 })
					expect(list:IndexOf(0)).to.equal(0)
				end)

				it("should accept one as a starting index with one element", function()
					local list = LinkedList.new({ 1 })
					expect(list:IndexOf(1, 1)).to.equal(1)
				end)

				it("should error when the index is out of bounds with one element", function()
					local list = LinkedList.new({ 1 })
					expect(function()
						list:IndexOf(1, 2)
					end).to.throw("Index '2' is out of bounds.")
				end)

				it("should find the index with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:IndexOf(3)).to.equal(3)
				end)

				it("should return zero when the element doesn't exist with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:IndexOf(0)).to.equal(0)
				end)

				it("should find the first index with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 3 })
					expect(list:IndexOf(3)).to.equal(3)
				end)

				it("should find the first element starting with the index provided", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 3 })
					expect(list:IndexOf(3, 4)).to.equal(5)
				end)

				it("should error when the index is out of bounds with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(function()
						list:IndexOf(1, 6)
					end).to.throw("Index '6' is out of bounds.")
				end)
			end)

			describe("Last", function()
				it("should error when empty", function()
					local list = LinkedList.new()
					expect(function()
						list:Last()
					end).to.throw("No last element exists.")
				end)

				it("should get the last element with one element", function()
					local list = LinkedList.new({ 1 })
					expect(list:Last()).to.equal(1)
				end)

				it("should get the last element with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Last()).to.equal(5)
				end)

				it("should get the last element when elements are removed", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Pop()
					expect(list:Last()).to.equal(4)
				end)

				it("should error when all elements have been removed", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					while list:Count() > 0 do
						list:Pop()
					end
					expect(function()
						list:Last()
					end).to.throw("No last element exists.")
				end)
			end)

			describe("LastIndexOf", function()
				it("should return zero when empty", function()
					local list = LinkedList.new()
					expect(list:LastIndexOf(1)).to.equal(0)
				end)

				it("should find the index with one element", function()
					local list = LinkedList.new({ 1 })
					expect(list:LastIndexOf(1)).to.equal(1)
				end)

				it("should return zero when the element doesn't exist with one element", function()
					local list = LinkedList.new({ 1 })
					expect(list:LastIndexOf(0)).to.equal(0)
				end)

				it("should find the index with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:LastIndexOf(3)).to.equal(3)
				end)

				it("should return zero when the element doesn't exist with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:LastIndexOf(0)).to.equal(0)
				end)

				it("should find the last index with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 3 })
					expect(list:LastIndexOf(3)).to.equal(5)
				end)
			end)

			describe("Sub", function()
				it("should error when providing the first index when empty", function()
					local list = LinkedList.new()
					expect(function()
						list:Sub(1)
					end).to.throw("Index '1' is out of bounds.")
				end)

				it("should create a sub-list with one element", function()
					local list = LinkedList.new({ 1 })
					expect(list:Sub(1):Get(1)).to.equal(1)
				end)

				it("should error when the first index is out of bounds with one element", function()
					local list = LinkedList.new({ 1 })
					expect(function()
						list:Sub(2)
					end).to.throw("Index '2' is out of bounds.")
				end)

				it("should error when the last index is out of bounds with one element", function()
					local list = LinkedList.new({ 1 })
					expect(function()
						list:Sub(1, 2)
					end).to.throw("Index '2' is out of bounds.")
				end)

				it("should create a sub-list with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local sub = list:Sub(3)
					expect(sub:Count()).to.equal(3)
					expect(sub:Get(1)).to.equal(3)
					expect(sub:Get(2)).to.equal(4)
					expect(sub:Get(3)).to.equal(5)
				end)

				it("should create a sub-list with a last index and many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local sub = list:Sub(2, 4)
					expect(sub:Count()).to.equal(3)
					expect(sub:Get(1)).to.equal(2)
					expect(sub:Get(2)).to.equal(3)
					expect(sub:Get(3)).to.equal(4)
				end)

				it("should error when the first index is out of bounds with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(function()
						list:Sub(0)
					end).to.throw("Index '0' is out of bounds.")
				end)

				it("should error when the last index is out of bounds with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(function()
						list:Sub(1, 6)
					end).to.throw("Index '6' is out of bounds.")
				end)

				it("should error when providing a last index smaller than the first index", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(function()
						list:Sub(4, 2)
					end).to.throw("Last index is smaller than first index.")
				end)
			end)
		end)

		describe("Optional Methods", function()
			describe("Delete", function()
				it("should error when empty", function()
					local list = LinkedList.new()
					expect(function()
						list:Delete(1)
					end).to.throw("Index '1' is out of bounds.")
				end)

				it("should delete when there is one element", function()
					local list = LinkedList.new({ 1 })
					list:Delete(1)
					expect(list:Count()).to.equal(0)
				end)

				it("should return true", function()
					local list = LinkedList.new({ 1 })
					expect(list:Delete(1)).to.equal(true)
				end)

				it("should error when out of bounds with one element", function()
					local list = LinkedList.new({ 1 })
					expect(function()
						list:Delete(0)
					end).to.throw("Index '0' is out of bounds.")
				end)

				it("should delete when there are many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Delete(3)
					expect(list:Count()).to.equal(4)
					expect(list:Get(3)).to.equal(4)
					list:Delete(3)
					expect(list:Count()).to.equal(3)
					expect(list:Get(3)).to.equal(5)
				end)

				it("should error when out of bounds with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(function()
						list:Delete(6)
					end).to.throw("Index '6' is out of bounds.")
				end)
			end)

			describe("Insert", function()
				it("should insert an item when empty", function()
					local list = LinkedList.new()
					list:Insert(1, 1)
					expect(list:Get(1)).to.equal(1)
				end)

				it("should error when out of bounds when empty", function()
					local list = LinkedList.new()
					expect(function()
						list:Insert(0, 1)
					end).to.throw("Index '0' is out of bounds.")
				end)

				it("should insert an item at the front with one element", function()
					local list = LinkedList.new({ 1 })
					list:Insert(1, 2)
					expect(list:Get(1)).to.equal(2)
					expect(list:Get(2)).to.equal(1)
				end)

				it("should insert an item at the back with one element", function()
					local list = LinkedList.new({ 1 })
					list:Insert(2, 2)
					expect(list:Get(1)).to.equal(1)
					expect(list:Get(2)).to.equal(2)
				end)

				it("should error when out of bounds with one element", function()
					local list = LinkedList.new({ 1 })
					expect(function()
						list:Insert(3, 2)
					end).to.throw("Index '3' is out of bounds.")
				end)

				it("should insert an item at the front with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Insert(1, 6)
					expect(list:Get(1)).to.equal(6)
					expect(list:Get(2)).to.equal(1)
					expect(list:Count()).to.equal(6)
				end)

				it("should insert an item in the middle with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Insert(3, 6)
					expect(list:Get(2)).to.equal(2)
					expect(list:Get(3)).to.equal(6)
					expect(list:Get(4)).to.equal(3)
					expect(list:Count()).to.equal(6)
				end)

				it("should insert an item at the back with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Insert(6, 6)
					expect(list:Get(5)).to.equal(5)
					expect(list:Get(6)).to.equal(6)
					expect(list:Count()).to.equal(6)
				end)

				it("should error when out of bounds with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(function()
						list:Insert(7, 6)
					end).to.throw("Index '7' is out of bounds.")
				end)

				it("should return true", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Insert(1, 6)).to.equal(true)
				end)
			end)

			describe("InsertAll", function()
				it("should insert one item when empty", function()
					local list = LinkedList.new()
					local insert = LinkedList.new({ 6 })
					list:InsertAll(1, insert)
					expect(list:Get(1)).to.equal(6)
				end)

				it("should insert all items when empty", function()
					local list = LinkedList.new()
					local insert = LinkedList.new({ 6, 7, 8, 9, 10 })
					list:InsertAll(1, insert)
					expect(list:Get(1)).to.equal(6)
					expect(list:Get(2)).to.equal(7)
					expect(list:Get(3)).to.equal(8)
					expect(list:Get(4)).to.equal(9)
					expect(list:Get(5)).to.equal(10)
				end)

				it("should error when out of bounds when empty", function()
					local list = LinkedList.new()
					local insert = LinkedList.new({ 6, 7, 8, 9, 10 })
					expect(function()
						list:InsertAll(0, insert)
					end).to.throw("Index '0' is out of bounds.")
				end)

				it("should insert one item at the front with one element", function()
					local list = LinkedList.new({ 1 })
					local insert = LinkedList.new({ 6 })
					list:InsertAll(1, insert)
					expect(list:Get(1)).to.equal(6)
					expect(list:Get(2)).to.equal(1)
				end)

				it("should insert all items at the front with one element", function()
					local list = LinkedList.new({ 1 })
					local insert = LinkedList.new({ 6, 7, 8, 9, 10 })
					list:InsertAll(1, insert)
					expect(list:Get(1)).to.equal(6)
					expect(list:Get(2)).to.equal(7)
					expect(list:Get(3)).to.equal(8)
					expect(list:Get(4)).to.equal(9)
					expect(list:Get(5)).to.equal(10)
					expect(list:Get(6)).to.equal(1)
				end)

				it("should insert one item at the back with one element", function()
					local list = LinkedList.new({ 1 })
					local insert = LinkedList.new({ 6 })
					list:InsertAll(2, insert)
					expect(list:Get(1)).to.equal(1)
					expect(list:Get(2)).to.equal(6)
				end)

				it("should insert all items at the back with one element", function()
					local list = LinkedList.new({ 1 })
					local insert = LinkedList.new({ 6, 7, 8, 9, 10 })
					list:InsertAll(2, insert)
					expect(list:Get(1)).to.equal(1)
					expect(list:Get(2)).to.equal(6)
					expect(list:Get(3)).to.equal(7)
					expect(list:Get(4)).to.equal(8)
					expect(list:Get(5)).to.equal(9)
					expect(list:Get(6)).to.equal(10)
				end)

				it("should error when out of bounds with one element", function()
					local list = LinkedList.new({ 1 })
					local insert = LinkedList.new({ 6, 7, 8, 9, 10 })
					expect(function()
						list:InsertAll(3, insert)
					end).to.throw("Index '3' is out of bounds.")
				end)

				it("should insert one item at the front with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local insert = LinkedList.new({ 6 })
					list:InsertAll(1, insert)
					expect(list:Get(1)).to.equal(6)
					expect(list:Get(2)).to.equal(1)
					expect(list:Count()).to.equal(6)
				end)

				it("should insert all items at the front with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local insert = LinkedList.new({ 6, 7, 8, 9, 10 })
					list:InsertAll(1, insert)
					expect(list:Get(1)).to.equal(6)
					expect(list:Get(2)).to.equal(7)
					expect(list:Get(3)).to.equal(8)
					expect(list:Get(4)).to.equal(9)
					expect(list:Get(5)).to.equal(10)
					expect(list:Get(6)).to.equal(1)
					expect(list:Count()).to.equal(10)
				end)

				it("should insert one item in the middle with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local insert = LinkedList.new({ 6 })
					list:InsertAll(3, insert)
					expect(list:Get(2)).to.equal(2)
					expect(list:Get(3)).to.equal(6)
					expect(list:Get(4)).to.equal(3)
					expect(list:Count()).to.equal(6)
				end)

				it("should insert all items in the middle with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local insert = LinkedList.new({ 6, 7, 8, 9, 10 })
					list:InsertAll(3, insert)
					expect(list:Get(2)).to.equal(2)
					expect(list:Get(3)).to.equal(6)
					expect(list:Get(4)).to.equal(7)
					expect(list:Get(5)).to.equal(8)
					expect(list:Get(6)).to.equal(9)
					expect(list:Get(7)).to.equal(10)
					expect(list:Get(8)).to.equal(3)
					expect(list:Count()).to.equal(10)
				end)

				it("should insert one item at the back with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local insert = LinkedList.new({ 6 })
					list:InsertAll(6, insert)
					expect(list:Get(5)).to.equal(5)
					expect(list:Get(6)).to.equal(6)
					expect(list:Count()).to.equal(6)
				end)

				it("should insert all items at the back with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local insert = LinkedList.new({ 6, 7, 8, 9, 10 })
					list:InsertAll(6, insert)
					expect(list:Get(5)).to.equal(5)
					expect(list:Get(6)).to.equal(6)
					expect(list:Get(7)).to.equal(7)
					expect(list:Get(8)).to.equal(8)
					expect(list:Get(9)).to.equal(9)
					expect(list:Get(10)).to.equal(10)
					expect(list:Count()).to.equal(10)
				end)

				it("should error when out of bounds with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local insert = LinkedList.new({ 6, 7, 8, 9, 10 })
					expect(function()
						list:InsertAll(7, insert)
					end).to.throw("Index '7' is out of bounds.")
				end)

				it("should return true", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					local insert = LinkedList.new({ 6, 7, 8, 9, 10 })
					expect(list:InsertAll(1, insert)).to.equal(true)
				end)
			end)

			describe("Pop", function()
				it("should error when empty", function()
					local list = LinkedList.new()
					expect(function()
						list:Pop()
					end).to.throw("No last element exists.")
				end)

				it("should remove an item from the end with one element", function()
					local list = LinkedList.new({ 1 })
					list:Pop()
					expect(list:Count()).to.equal(0)
				end)

				it("should get the element when removing with one element", function()
					local list = LinkedList.new({ 1 })
					expect(list:Pop()).to.equal(1)
				end)

				it("should remove an item from the end with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Pop()
					expect(list:Last()).to.equal(4)
					expect(list:Count()).to.equal(4)
				end)

				it("should get the element when removing with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Pop()).to.equal(5)
				end)
			end)

			describe("Push", function()
				it("should add an item to the end when empty", function()
					local list = LinkedList.new()
					list:Push(1)
					expect(list:Last()).to.equal(1)
					expect(list:Count()).to.equal(1)
				end)

				it("should add an item to the end with one element", function()
					local list = LinkedList.new({ 1 })
					list:Push(2)
					expect(list:Last()).to.equal(2)
					expect(list:Count()).to.equal(2)
				end)

				it("should add an item to the end with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Push(6)
					expect(list:Last()).to.equal(6)
					expect(list:Count()).to.equal(6)
				end)

				it("should return true", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Push(6)).to.equal(true)
				end)
			end)

			describe("Set", function()
				it("should error when empty", function()
					local list = LinkedList.new()
					expect(function()
						list:Set(1, 1)
					end).to.throw("Index '1' is out of bounds.")
				end)

				it("should set an item with one element", function()
					local list = LinkedList.new({ 1 })
					list:Set(1, 2)
					expect(list:Get(1)).to.equal(2)
					expect(list:Count()).to.equal(1)
				end)

				it("should return true when changing with one element", function()
					local list = LinkedList.new({ 1 })
					expect(list:Set(1, 2)).to.equal(true)
				end)

				it("should return false when not changing with one element", function()
					local list = LinkedList.new({ 1 })
					expect(list:Set(1, 1)).to.equal(false)
				end)

				it("should error when out of bounds with one element", function()
					local list = LinkedList.new({ 1 })
					expect(function()
						list:Set(2, 2)
					end).to.throw("Index '2' is out of bounds.")
				end)

				it("should set an item with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Set(3, 6)
					expect(list:Get(3)).to.equal(6)
					expect(list:Count()).to.equal(5)
				end)

				it("should return true when changing with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Set(3, 6)).to.equal(true)
				end)

				it("should return false when not changing with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Set(3, 3)).to.equal(false)
				end)

				it("should error when out of bounds with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(function()
						list:Set(6, 6)
					end).to.throw("Index '6' is out of bounds.")
				end)
			end)

			describe("Shift", function()
				it("should error when empty", function()
					local list = LinkedList.new()
					expect(function()
						list:Shift()
					end).to.throw("No first element exists.")
				end)

				it("should remove an item from the beginning with one element", function()
					local list = LinkedList.new({ 1 })
					list:Shift()
					expect(list:Count()).to.equal(0)
				end)

				it("should get the element when removing with one element", function()
					local list = LinkedList.new({ 1 })
					expect(list:Shift()).to.equal(1)
				end)

				it("should remove an item from the beginning with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Shift()
					expect(list:First()).to.equal(2)
					expect(list:Count()).to.equal(4)
				end)

				it("should get the element when removing with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Shift()).to.equal(1)
				end)
			end)

			describe("Unshift", function()
				it("should add an item to the beginning when empty", function()
					local list = LinkedList.new()
					list:Unshift(1)
					expect(list:First()).to.equal(1)
					expect(list:Count()).to.equal(1)
				end)

				it("should add an item to the beginning with one element", function()
					local list = LinkedList.new({ 1 })
					list:Unshift(2)
					expect(list:First()).to.equal(2)
					expect(list:Count()).to.equal(2)
				end)

				it("should add an item to the beginning with many elements", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					list:Unshift(6)
					expect(list:First()).to.equal(6)
					expect(list:Count()).to.equal(6)
				end)

				it("should return true", function()
					local list = LinkedList.new({ 1, 2, 3, 4, 5 })
					expect(list:Unshift(6)).to.equal(true)
				end)
			end)
		end)
	end)
end
